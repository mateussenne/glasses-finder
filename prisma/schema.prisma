// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Gender {
    Male
    Female
    Unissex
}

enum Shape {
    Square
    Circular
    Heart
    Diamond
    Oval
    Oblong
}

model Brand {
    id      String    @id @default(cuid())
    name    String
    glasses Glasses[]
}

model Glasses {
    id          String      @id @default(cuid())
    name        String
    price       Float
    polarized   Boolean     @default(false)
    gender      Gender      @default(Unissex)
    faceShapes  FaceShape[]
    description String?     @db.Text
    Brand       Brand       @relation(fields: [brandId], references: [id])
    brandId     String
}

model FaceShape {
    id      String    @id @default(cuid())
    shape   Shape
    Glasses Glasses[]
}

model Request {
    id        String    @id @default(cuid())
    shape     Shape
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
}
